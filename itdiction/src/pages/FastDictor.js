import React, { useState, useEffect } from 'react';
import {
    Box,
    Grid,
    Typography,
    Select,
    MenuItem,
    FormControl,
    InputLabel,
    Button,
    Stack,
    TextField,
    Paper,
} from '@mui/material';
import Footer from '../components/Footer';

const FastDictor = () => {
    const [texts] = useState([
        "–ö”©–∫—Ç–µ–º –∫–µ–ª–¥—ñ. “ö–∞—Ä –µ—Ä—ñ–ø, –∫“Ø–Ω –∂—ã–ª—ã–Ω–¥—ã. –ê“ì–∞—à—Ç–∞—Ä –±“Ø—Ä—à—ñ–∫ –∂–∞—Ä—ã–ø, –∞–π–Ω–∞–ª–∞ –∂–∞—Å—ã–ª —Ç“Ø—Å–∫–µ –±–æ—è–ª–¥—ã. –ê–¥–∞–º–¥–∞—Ä –∂—ã–ª—ã –∫–∏—ñ–º–¥–µ—Ä—ñ–Ω —à–µ—à—ñ–ø, —Å–µ—Ä—É–µ–Ω–¥–µ—É–≥–µ —à—ã“õ—Ç—ã. “ö“±—Å—Ç–∞—Ä –∂—ã–ª—ã –∂–∞“õ—Ç–∞–Ω –æ—Ä–∞–ª–¥—ã. –ë–∞—Ä–ª—ã“ì—ã —Ç–∞–±–∏“ì–∞—Ç—Ç—ã“£ –æ—è–Ω—É—ã–Ω “õ—É–∞–Ω—ã—à–ø–µ–Ω “õ–∞—Ä—Å—ã –∞–ª–¥—ã.",
        "“ö–∞–∑–∞“õ—Ç—ã“£ “±–ª—Ç—Ç—ã“õ —Ç–∞“ì–∞–º–¥–∞—Ä—ã ‚Äì –µ—Ç, –±–∞—É—ã—Ä—Å–∞“õ, “õ—ã–º—ã–∑, —à“±–±–∞—Ç. –ï—Ç ‚Äì “õ–∞–∑–∞“õ —Ö–∞–ª“õ—ã–Ω—ã“£ –±–∞—Å—Ç—ã –∞—Å—ã. –û–Ω—ã “õ–æ–Ω–∞“õ“õ–∞ –∞—Ä–Ω–∞–ø –∞—Å–∞–¥—ã. –ë–∞—É—ã—Ä—Å–∞“õ ‚Äì –¥–∞—Å—Ç–∞—Ä—Ö–∞–Ω–Ω—ã“£ —Å”ô–Ω—ñ. –û–Ω—ã –º–∞–π“ì–∞ “õ—É—ã—Ä—ã–ø, —à–∞–π–º–µ–Ω –±—ñ—Ä–≥–µ “±—Å—ã–Ω–∞–¥—ã. “ö—ã–º—ã–∑ –±–µ–Ω —à“±–±–∞—Ç ‚Äì –¥”ô—Ä—É–º–µ–Ω–≥–µ –±–∞–π, —à”©–ª –±–∞—Å–∞—Ç—ã–Ω —Å—É—Å—ã–Ω–¥–∞—Ä.",
        "–ê–¥–∞–º ”©–º—ñ—Ä –±–æ–π—ã –±—ñ–ª—ñ–º –∞–ª–∞–¥—ã. –ë—ñ–ª—ñ–º–¥—ñ –∞–¥–∞–º ‚Äì —Ç–∞–±—ã—Å—Ç—ã –∞–¥–∞–º. –ö—ñ—Ç–∞–ø –æ“õ—É, —Å–∞–±–∞“õ“õ–∞ –¥–∞–π—ã–Ω–¥–∞–ª—É, –∑–µ—Ä—Ç—Ç–µ—É –∂“Ø—Ä–≥—ñ–∑—É ‚Äì –±”ô—Ä—ñ –¥–µ –¥–∞–º—É–¥—ã“£ –∂–æ–ª—ã. –ë—ñ–ª—ñ–º ‚Äì –∂–∞—Ä—ã“õ, –±—ñ–ª—ñ–º ‚Äì –±–æ–ª–∞—à–∞“õ—Ç—ã“£ –∫—ñ–ª—Ç—ñ.",
        "“ö–∞–∑–∞“õ—Å—Ç–∞–Ω ‚Äì “±–ª–∞–Ω-“ì–∞–π—ã—Ä –∂–µ—Ä—ñ –±–∞—Ä –µ–ª. –ú“±–Ω–¥–∞ –±–∏—ñ–∫ —Ç–∞—É–ª–∞—Ä, –∫–µ“£ –¥–∞–ª–∞–ª–∞—Ä, –º”©–ª–¥—ñ—Ä ”©–∑–µ–Ω–¥–µ—Ä –±–∞—Ä. –ê–ª–∞—Ç–∞—É –º–µ–Ω –ê–ª—Ç–∞–π–¥—ã“£ —à—ã“£–¥–∞—Ä—ã, –ö–∞—Å–ø–∏–π –º–µ–Ω –ë–∞–ª“õ–∞—à –∫”©–ª–¥–µ—Ä—ñ ‚Äì —Ç–∞–±–∏“ì–∞—Ç—Ç—ã“£ –µ—Ä–µ–∫—à–µ —Å—ã–π–ª–∞—Ä—ã.",
        "–°–ø–æ—Ä—Ç ‚Äì –¥–µ–Ω—Å–∞—É–ª—ã“õ—Ç—ã“£ –∫–µ–ø—ñ–ª—ñ. –ñ“Ø–≥—ñ—Ä—É, –∂“Ø–∑—É, —Ñ—É—Ç–±–æ–ª, –±–æ–∫—Å ‚Äì –¥–µ–Ω–µ–Ω—ñ —à—ã–Ω—ã“õ—Ç—ã—Ä–∞–¥—ã. –°–ø–æ—Ä—Ç–ø–µ–Ω –∞–π–Ω–∞–ª—ã—Å“õ–∞–Ω –∞–¥–∞–º —Å–µ—Ä–≥–µ–∫ ”ô—Ä—ñ –º—ã“õ—Ç—ã –±–æ–ª–∞–¥—ã. ”ò—Ä –∞–¥–∞–º —Å–∞–ª–∞—É–∞—Ç—Ç—ã ”©–º—ñ—Ä —Å–∞–ª—Ç—ã–Ω “±—Å—Ç–∞–Ω—É—ã –∫–µ—Ä–µ–∫.",
    ]);
    const [selectedText, setSelectedText] = useState('');
    const [speed, setSpeed] = useState(300);
    const [currentWordIndex, setCurrentWordIndex] = useState(0);
    const [isPlaying, setIsPlaying] = useState(false);
    const [audioChunks, setAudioChunks] = useState([]);
    const [mediaRecorder, setMediaRecorder] = useState(null);
    const [chatInput, setChatInput] = useState(''); // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
    const [chatMessages, setChatMessages] = useState([]); // –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞

    const handleSendMessage = () => {
        if (!chatInput.trim()) return;
        setChatMessages((prev) => [...prev, { sender: 'user', text: chatInput }]);
        setChatInput('');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò
    };

    const handleStartText = () => {
        if (!selectedText) {
            alert('–¢–µ–∫—Å—Ç —Ç–∞“£–¥–∞“£—ã–∑!');
            return;
        }
        setIsPlaying(true);
        setCurrentWordIndex(0);
    };

    const handleStopText = () => setIsPlaying(false);

    useEffect(() => {
        if (isPlaying) {
            const words = selectedText.split(' ');
            const interval = setInterval(() => {
                setCurrentWordIndex((prevIndex) => {
                    if (prevIndex < words.length - 1) {
                        return prevIndex + 1;
                    } else {
                        clearInterval(interval);
                        setIsPlaying(false);
                        return prevIndex;
                    }
                });
            }, speed);

            return () => clearInterval(interval);
        }
    }, [isPlaying, selectedText, speed]);

    const handleStartRecording = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            const recorder = new MediaRecorder(stream);
            setMediaRecorder(recorder);

            recorder.ondataavailable = (event) => {
                setAudioChunks((prev) => [...prev, event.data]);
            };

            recorder.start();
            alert('–ñ–∞–∑—É –±–∞—Å—Ç–∞–ª–¥—ã!');
        } catch (error) {
            alert('–ú–∏–∫—Ä–æ—Ñ–æ–Ω“ì–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ “õ–∞–∂–µ—Ç!');
        }
    };

    const handleStopRecording = () => {
        if (mediaRecorder) {
            mediaRecorder.stop();
            alert('–ñ–∞–∑—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã!');
        }
    };

    const handleSaveRecording = () => {
        if (audioChunks.length === 0) {
            alert('–ñ–∞–∑—É –∂–æ“õ!');
            return;
        }

        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioUrl);
        audio.controls = true;

        const audioContainer = document.getElementById('audio-container');
        audioContainer.appendChild(audio);
        setAudioChunks([]);
    };

    return (
        <Box sx={{ padding: 4 }}>
            <Typography variant="h4" align="center" gutterBottom>
                –¢–µ–∫—Å—Ç —Ç–∞“£–¥–∞—É –∂”ô–Ω–µ –∂—ã–ª–¥–∞–º–¥—ã“õ—Ç—ã –±–∞–ø—Ç–∞—É
            </Typography>
            <Grid container spacing={3} sx={{ marginBottom: 4 }}>
                <Grid item xs={12} md={6}>
                    <FormControl fullWidth>
                        <InputLabel id="text-select-label">–¢–µ–∫—Å—Ç —Ç–∞“£–¥–∞—É</InputLabel>
                        <Select
                            labelId="text-select-label"
                            value={selectedText}
                            onChange={(e) => setSelectedText(texts[e.target.value])}
                        >
                            <MenuItem value="">
                                <em>–¢–µ–∫—Å—Ç —Ç–∞“£–¥–∞“£—ã–∑</em>
                            </MenuItem>
                            {texts.map((text, index) => (
                                <MenuItem key={index} value={index}>
                                    –¢–µ–∫—Å—Ç {index + 1}
                                </MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                </Grid>
                <Grid item xs={12} md={6}>
                    <FormControl fullWidth>
                        <InputLabel id="speed-select-label">–ñ—ã–ª–¥–∞–º–¥—ã“õ –¥–µ“£–≥–µ–π—ñ</InputLabel>
                        <Select
                            labelId="speed-select-label"
                            value={speed}
                            onChange={(e) => setSpeed(Number(e.target.value))}
                        >
                            <MenuItem value={700}>1 - ”®—Ç–µ –±–∞—è—É</MenuItem>
                            <MenuItem value={500}>2 - –ë–∞—è—É</MenuItem>
                            <MenuItem value={300}>3 - –û—Ä—Ç–∞—à–∞</MenuItem>
                            <MenuItem value={200}>4 - –ñ—ã–ª–¥–∞–º</MenuItem>
                            <MenuItem value={100}>5 - ”®—Ç–µ –∂—ã–ª–¥–∞–º</MenuItem>
                        </Select>
                    </FormControl>
                </Grid>
            </Grid>
            <Stack direction="row" spacing={2} justifyContent="center" sx={{ marginBottom: 4 }}>
                <Button variant="contained" color="primary" onClick={handleStartText}>
                    üìú –¢–µ–∫—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞—É
                </Button>
                <Button variant="contained" color="error" onClick={handleStopText}>
                    ‚èπ –¢–æ“õ—Ç–∞—Ç—É
                </Button>
                <Button variant="contained" color="success" onClick={handleStartRecording}>
                    üé§ –ñ–∞–∑—É–¥—ã –±–∞—Å—Ç–∞—É
                </Button>
                <Button variant="contained" color="warning" onClick={handleStopRecording}>
                    ‚èπ –ñ–∞–∑—É–¥—ã —Ç–æ“õ—Ç–∞—Ç—É
                </Button>
                <Button variant="contained" color="info" onClick={handleSaveRecording}>
                    üíæ –ñ–∞–∑—É–¥—ã —Å–∞“õ—Ç–∞—É
                </Button>
            </Stack>
            <Typography variant="h5" align="center" gutterBottom>
                {selectedText.split(' ')[currentWordIndex] || ''}
            </Typography>
            <Box id="audio-container" sx={{ textAlign: 'center' }}></Box>

            {/* –ß–∞—Ç —Å –ò–ò */}
            <Paper elevation={3} sx={{ padding: 3, marginTop: 4 }}>
                <Typography variant="h5" gutterBottom>
                    –ß–∞—Ç —Å –ò–ò
                </Typography>
                <Box sx={{ maxHeight: 200, overflowY: 'auto', marginBottom: 2 }}>
                    {chatMessages.map((msg, index) => (
                        <Typography
                            key={index}
                            align={msg.sender === 'user' ? 'right' : 'left'}
                            sx={{
                                backgroundColor: msg.sender === 'user' ? '#e0f7fa' : '#f1f8e9',
                                padding: 1,
                                borderRadius: 2,
                                marginBottom: 1,
                            }}
                        >
                            {msg.text}
                        </Typography>
                    ))}
                </Box>
                <TextField
                    fullWidth
                    variant="outlined"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    value={chatInput}
                    onChange={(e) => setChatInput(e.target.value)}
                    sx={{ marginBottom: 2 }}
                />
                <Button variant="contained" color="primary" onClick={handleSendMessage}>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
            </Paper>

            <Footer />
        </Box>
    );
};

export default FastDictor;